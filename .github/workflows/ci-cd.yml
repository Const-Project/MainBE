# 워크플로우의 이름
name: Spring Boot CI/CD with AWS

on:
  push:
    branches: [ develop ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # =================================================================
    # 이 env 블록을 작업(job) 레벨로 옮겨서 모든 steps에서 사용 가능하게 합니다.
    # =================================================================
    env:
      ECR_REPOSITORY: cp_main_be # ECR 리포지토리 이름
      IMAGE_TAG: ${{ github.sha }}   # Git 커밋 해시를 이미지 태그로 사용

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드 및 단위 테스트 실행
      - name: Build with Gradle
        run: ./gradlew build

      # 5. AWS 자격 증명 설정 (OIDC 방식)
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Docker 이미지 빌드, 태깅, ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env: # 이제 이 env 블록에는 이 단계에서만 필요한 ECR_REGISTRY만 정의합니다.
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

      # 8. EC2에 접속하여 배포 스크립트 실행
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 이제 ${{ env.ECR_REPOSITORY }}가 정상적으로 'cp_main_be'로 인식됩니다.
            docker pull ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

            if [ $(docker ps -a -q -f name=spring-app-container) ]; then
              docker stop spring-app-container
              docker rm spring-app-container
            fi
            
            docker run -d --name spring-app-container -p 80:8080 \
            -e DB_URL=$DB_URL \
            -e DB_USERNAME=$DB_USERNAME \
            -e DB_PASSWORD=$DB_PASSWORD \
            -e SPRING_PROFILES_ACTIVE=prod \
            ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
